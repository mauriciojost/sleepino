#!/usr/bin/env bash

set -e
set -x

while getopts n:p:fms:vyebo: option
do
  case "${option}"
  in
    n) PIO_ENVIRONMENT=${OPTARG};;
    p) PROFILE=${OPTARG};;
    f) UPLOAD_FIRMWARE=true;;
    m) MONITOR=true;;
    s) UPLOAD_FS_DIR=${OPTARG};;
    v) PLATFORMIO_RUN_PARAMS="-v";;
    y) IGNORE_UNCOMMITED_CHANGES=true;;
    e) EXPORT_FIRMWARE_FILE=true;;
    b) BACKUP_IMAGE=true;;
    o) UPLOAD_OTA_IP=${OPTARG};;
  esac
done

VERSION=`cat library.json | python -c 'import sys, json; print json.load(sys.stdin)["version"]'`
COMMIT_ID="`git rev-parse --short HEAD`"
PROJ_VERSION_ID="$VERSION-$COMMIT_ID" 
LOG_SUBDIR=images
EXPORT_SUBDIR=exports/$PIO_ENVIRONMENT/

if [ -z "$PROFILE" ]
then
  echo "Variable -p PROFILE is mandatory"
  exit 1
fi

echo "### Using profile $PROFILE..."
export PLATFORMIO_BUILD_FLAGS="-D PROJ_VERSION=$PROJ_VERSION_ID `cat $PROFILE | grep -v '^#'`" 

# For uploading a compilation is required, so no need to force it here
if [ -z "$UPLOAD_FIRMWARE" ]
then
  echo "### Compiling..."
  platformio run -e $PIO_ENVIRONMENT $PLATFORMIO_RUN_PARAMS
fi

if [ -n "$EXPORT_FIRMWARE_FILE" ]
then
  echo "### Exporting firmware file..."
  rm -fr $EXPORT_SUBDIR/
  mkdir -p $EXPORT_SUBDIR/
  cp .pioenvs/$PIO_ENVIRONMENT/firmware.bin $EXPORT_SUBDIR/firmware-$PROJ_VERSION_ID.$PIO_ENVIRONMENT.bin
fi

if [ -n "$UPLOAD_FIRMWARE" ]
then

  echo "### Will upload firmware..."

  if [ -z "$IGNORE_UNCOMMITED_CHANGES" ]
  then
    echo "### Checking if no changes to be committed..."
    git diff --exit-code
  fi
  if [ -n "$UPLOAD_OTA_IP" ]
  then
    UPLOAD_COMMAND_SUFFIX="--upload-port $UPLOAD_OTA_IP"
  fi

  echo "### Uploading..."
  platformio run -e $PIO_ENVIRONMENT --target upload $UPLOAD_COMMAND_SUFFIX

  if [ -n "$BACKUP_IMAGE" ]
  then
    echo "### Backing up image..."
    mkdir -p $LOG_SUBDIR/$PROJ_VERSION_ID/
    rm -f $LOG_SUBDIR/$PROJ_VERSION_ID/*
    find . -name *.elf | xargs -I% cp -f % $LOG_SUBDIR/$PROJ_VERSION_ID/
  fi

fi

if [ -n "$UPLOAD_FS_DIR" ]
then
  echo "### Will upload tuning to file-system..."
  TUNING_PATH="$UPLOAD_FS_DIR"
  rm -fr data
  ln -s `readlink -e $TUNING_PATH` data
  echo "### Uploading $TUNING_PATH"
  platformio run -e $PIO_ENVIRONMENT --target buildfs
  platformio run -e $PIO_ENVIRONMENT --target uploadfs
fi


if [ -n "$MONITOR" ]
then
  echo "### Backing up logs..."
  mkdir -p $LOG_SUBDIR/$PROJ_VERSION_ID/
  echo "### Monitoring..."
  { ./serial_monitor 0 > >(tee $LOG_SUBDIR/$PROJ_VERSION_ID/stdout.txt ); } 2> >(tee $LOG_SUBDIR/$PROJ_VERSION_ID/stderr.txt )
fi

echo "Done."


